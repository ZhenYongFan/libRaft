syntax = "proto3";
package raftpb;

option optimize_for = LITE_RUNTIME;

enum EntryType {
  EntryNormal     = 0;
  EntryConfChange = 1;
}

message Entry {
  EntryType  Type  = 1;
  uint64     Term  = 2;
  uint64     Index = 3;
  bytes      Data  = 4;
}

message ConfState {
  repeated uint32 nodes = 1;
}

message SnapshotMetadata {
  ConfState conf_state = 1;
  uint64    index      = 2;
  uint64    term       = 3;
}

message Snapshot {
  bytes            data     = 1;
  SnapshotMetadata metadata = 2;
}

enum MessageType {
  MsgHup             = 0;   //当Follower节点的选举计时器超时，会发送MsgHup消息
  MsgBeat            = 1;   //Leader发送心跳，主要作用是探活，Follower接收到MsgBeat会重置选举计时器，防止Follower发起新一轮选举
  MsgProp            = 2;   //客户端发往到集群的写请求是通过MsgProp消息表示的
  MsgApp             = 3;   //当一个节点通过选举成为Leader时，会向Follower发送MsgApp消息同步日志
  MsgAppResp         = 4;   //MsgApp的响应消息
  MsgVote            = 5;   //当PreCandidate状态节点收到半数以上的投票之后，会发起新一轮的选举，即向集群中的其他节点发送MsgVote消息
  MsgVoteResp        = 6;   //MsgVote选举消息响应的消息
  MsgSnap            = 7;   //Leader向Follower发送快照信息
  MsgHeartbeat       = 8;   //Leader发送的心跳消息
  MsgHeartbeatResp   = 9;   //Follower处理心跳回复返回的消息类型
  MsgUnreachable     = 10;  //Follower消息不可达
  MsgSnapStatus      = 11;  //如果Leader发送MsgSnap消息时出现异常，则会调用Raft接口发送MsgUnreachable和MsgSnapStatus消息
  MsgCheckQuorum     = 12;  //Leader检测是否保持半数以上的连接
  MsgTransferLeader  = 13;  //Leader节点转移时使用
  MsgTimeoutNow      = 14;  //Leader节点转移超时，会发该类型的消息，使Follower的选举计时器立即过期，并发起新一轮的选举
  MsgReadIndex       = 15;  //客户端发往集群的只读消息使用MsgReadIndex消息（只读的两种模式：ReadOnlySafe和ReadOnlyLeaseBased）
  MsgReadIndexResp   = 16;  //MsgReadIndex消息的响应消息
  MsgPreVote         = 17;  //PreCandidate状态下的节点发送的消息
  MsgPreVoteResp     = 18;  //预选节点收到的响应消息
}

message Message {
  MessageType type        = 1;
  uint32      to          = 2;
  uint32      from        = 3;
  uint64      term        = 4;
  uint64      logTerm     = 5;
  uint64      index       = 6;
  repeated Entry       entries     = 7;
  uint64      commit      = 8;
  Snapshot    snapshot    = 9;
  bool        reject      = 10;
  uint64      rejectHint  = 11;
  bytes       context     = 12; 
}

message HardState {
  uint64 term   = 1;
  uint64 commit = 2;
  uint32 vote   = 3;
}

enum ConfChangeType {
  ConfChangeAddNode    = 0;
  ConfChangeRemoveNode = 1;
  ConfChangeUpdateNode = 2;
}

message ConfChange {
  uint64          ID      = 1;
  ConfChangeType  Type    = 2;
  uint64          NodeID  = 3;
  bytes           Context = 4;
}
