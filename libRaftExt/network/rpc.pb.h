// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define PROTOBUF_USE_DLLS

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace raftserverpb {
class DeleteRangeRequest;
class DeleteRangeRequestDefaultTypeInternal;
extern DeleteRangeRequestDefaultTypeInternal _DeleteRangeRequest_default_instance_;
class DeleteRangeResponse;
class DeleteRangeResponseDefaultTypeInternal;
extern DeleteRangeResponseDefaultTypeInternal _DeleteRangeResponse_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class RangeRequest;
class RangeRequestDefaultTypeInternal;
extern RangeRequestDefaultTypeInternal _RangeRequest_default_instance_;
class RangeResponse;
class RangeResponseDefaultTypeInternal;
extern RangeResponseDefaultTypeInternal _RangeResponse_default_instance_;
class RequestOp;
class RequestOpDefaultTypeInternal;
extern RequestOpDefaultTypeInternal _RequestOp_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class ResponseOp;
class ResponseOpDefaultTypeInternal;
extern ResponseOpDefaultTypeInternal _ResponseOp_default_instance_;
}  // namespace raftserverpb
PROTOBUF_NAMESPACE_OPEN
template<> ::raftserverpb::DeleteRangeRequest* Arena::CreateMaybeMessage<::raftserverpb::DeleteRangeRequest>(Arena*);
template<> ::raftserverpb::DeleteRangeResponse* Arena::CreateMaybeMessage<::raftserverpb::DeleteRangeResponse>(Arena*);
template<> ::raftserverpb::KeyValue* Arena::CreateMaybeMessage<::raftserverpb::KeyValue>(Arena*);
template<> ::raftserverpb::PutRequest* Arena::CreateMaybeMessage<::raftserverpb::PutRequest>(Arena*);
template<> ::raftserverpb::PutResponse* Arena::CreateMaybeMessage<::raftserverpb::PutResponse>(Arena*);
template<> ::raftserverpb::RangeRequest* Arena::CreateMaybeMessage<::raftserverpb::RangeRequest>(Arena*);
template<> ::raftserverpb::RangeResponse* Arena::CreateMaybeMessage<::raftserverpb::RangeResponse>(Arena*);
template<> ::raftserverpb::RequestOp* Arena::CreateMaybeMessage<::raftserverpb::RequestOp>(Arena*);
template<> ::raftserverpb::ResponseHeader* Arena::CreateMaybeMessage<::raftserverpb::ResponseHeader>(Arena*);
template<> ::raftserverpb::ResponseOp* Arena::CreateMaybeMessage<::raftserverpb::ResponseOp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftserverpb {

enum RangeRequest_SortOrder : int {
  RangeRequest_SortOrder_NONE = 0,
  RangeRequest_SortOrder_ASCEND = 1,
  RangeRequest_SortOrder_DESCEND = 2,
  RangeRequest_SortOrder_RangeRequest_SortOrder_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RangeRequest_SortOrder_RangeRequest_SortOrder_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RangeRequest_SortOrder_IsValid(int value);
constexpr RangeRequest_SortOrder RangeRequest_SortOrder_SortOrder_MIN = RangeRequest_SortOrder_NONE;
constexpr RangeRequest_SortOrder RangeRequest_SortOrder_SortOrder_MAX = RangeRequest_SortOrder_DESCEND;
constexpr int RangeRequest_SortOrder_SortOrder_ARRAYSIZE = RangeRequest_SortOrder_SortOrder_MAX + 1;

const std::string& RangeRequest_SortOrder_Name(RangeRequest_SortOrder value);
template<typename T>
inline const std::string& RangeRequest_SortOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeRequest_SortOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeRequest_SortOrder_Name.");
  return RangeRequest_SortOrder_Name(static_cast<RangeRequest_SortOrder>(enum_t_value));
}
bool RangeRequest_SortOrder_Parse(
    const std::string& name, RangeRequest_SortOrder* value);
enum RangeRequest_SortTarget : int {
  RangeRequest_SortTarget_KEY = 0,
  RangeRequest_SortTarget_VER = 1,
  RangeRequest_SortTarget_CREATE = 2,
  RangeRequest_SortTarget_MOD = 3,
  RangeRequest_SortTarget_VALUE = 4,
  RangeRequest_SortTarget_RangeRequest_SortTarget_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RangeRequest_SortTarget_RangeRequest_SortTarget_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RangeRequest_SortTarget_IsValid(int value);
constexpr RangeRequest_SortTarget RangeRequest_SortTarget_SortTarget_MIN = RangeRequest_SortTarget_KEY;
constexpr RangeRequest_SortTarget RangeRequest_SortTarget_SortTarget_MAX = RangeRequest_SortTarget_VALUE;
constexpr int RangeRequest_SortTarget_SortTarget_ARRAYSIZE = RangeRequest_SortTarget_SortTarget_MAX + 1;

const std::string& RangeRequest_SortTarget_Name(RangeRequest_SortTarget value);
template<typename T>
inline const std::string& RangeRequest_SortTarget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeRequest_SortTarget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeRequest_SortTarget_Name.");
  return RangeRequest_SortTarget_Name(static_cast<RangeRequest_SortTarget>(enum_t_value));
}
bool RangeRequest_SortTarget_Parse(
    const std::string& name, RangeRequest_SortTarget* value);
// ===================================================================

class KeyValue :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.KeyValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 5,
    kCreateRevisionFieldNumber = 2,
    kModRevisionFieldNumber = 3,
    kVersionFieldNumber = 4,
    kLeaseFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // int64 create_revision = 2;
  void clear_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 create_revision() const;
  void set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 mod_revision = 3;
  void clear_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 mod_revision() const;
  void set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 lease = 6;
  void clear_lease();
  ::PROTOBUF_NAMESPACE_ID::int64 lease() const;
  void set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:raftserverpb.KeyValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return CreateMaybeMessage<ResponseHeader>(nullptr);
  }

  ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.ResponseHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
    kRevisionFieldNumber = 3,
    kRaftTermFieldNumber = 4,
  };
  // uint64 cluster_id = 1;
  void clear_cluster_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 member_id = 2;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 raft_term = 4;
  void clear_raft_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 raft_term() const;
  void set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raftserverpb.ResponseHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raft_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RangeRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.RangeRequest) */ {
 public:
  RangeRequest();
  virtual ~RangeRequest();

  RangeRequest(const RangeRequest& from);
  RangeRequest(RangeRequest&& from) noexcept
    : RangeRequest() {
    *this = ::std::move(from);
  }

  inline RangeRequest& operator=(const RangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeRequest& operator=(RangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeRequest* internal_default_instance() {
    return reinterpret_cast<const RangeRequest*>(
               &_RangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RangeRequest& a, RangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeRequest* New() const final {
    return CreateMaybeMessage<RangeRequest>(nullptr);
  }

  RangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RangeRequest& from);
  void MergeFrom(const RangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.RangeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RangeRequest_SortOrder SortOrder;
  static constexpr SortOrder NONE =
    RangeRequest_SortOrder_NONE;
  static constexpr SortOrder ASCEND =
    RangeRequest_SortOrder_ASCEND;
  static constexpr SortOrder DESCEND =
    RangeRequest_SortOrder_DESCEND;
  static inline bool SortOrder_IsValid(int value) {
    return RangeRequest_SortOrder_IsValid(value);
  }
  static constexpr SortOrder SortOrder_MIN =
    RangeRequest_SortOrder_SortOrder_MIN;
  static constexpr SortOrder SortOrder_MAX =
    RangeRequest_SortOrder_SortOrder_MAX;
  static constexpr int SortOrder_ARRAYSIZE =
    RangeRequest_SortOrder_SortOrder_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SortOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortOrder_Name.");
    return RangeRequest_SortOrder_Name(enum_t_value);
  }
  static inline bool SortOrder_Parse(const std::string& name,
      SortOrder* value) {
    return RangeRequest_SortOrder_Parse(name, value);
  }

  typedef RangeRequest_SortTarget SortTarget;
  static constexpr SortTarget KEY =
    RangeRequest_SortTarget_KEY;
  static constexpr SortTarget VER =
    RangeRequest_SortTarget_VER;
  static constexpr SortTarget CREATE =
    RangeRequest_SortTarget_CREATE;
  static constexpr SortTarget MOD =
    RangeRequest_SortTarget_MOD;
  static constexpr SortTarget VALUE =
    RangeRequest_SortTarget_VALUE;
  static inline bool SortTarget_IsValid(int value) {
    return RangeRequest_SortTarget_IsValid(value);
  }
  static constexpr SortTarget SortTarget_MIN =
    RangeRequest_SortTarget_SortTarget_MIN;
  static constexpr SortTarget SortTarget_MAX =
    RangeRequest_SortTarget_SortTarget_MAX;
  static constexpr int SortTarget_ARRAYSIZE =
    RangeRequest_SortTarget_SortTarget_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SortTarget_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortTarget>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortTarget_Name.");
    return RangeRequest_SortTarget_Name(enum_t_value);
  }
  static inline bool SortTarget_Parse(const std::string& name,
      SortTarget* value) {
    return RangeRequest_SortTarget_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kRangeEndFieldNumber = 2,
    kLimitFieldNumber = 3,
    kRevisionFieldNumber = 4,
    kSortOrderFieldNumber = 5,
    kSortTargetFieldNumber = 6,
    kMinModRevisionFieldNumber = 10,
    kMaxModRevisionFieldNumber = 11,
    kMinCreateRevisionFieldNumber = 12,
    kMaxCreateRevisionFieldNumber = 13,
    kSerializableFieldNumber = 7,
    kKeysOnlyFieldNumber = 8,
    kCountOnlyFieldNumber = 9,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes range_end = 2;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);

  // int64 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 revision = 4;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .raftserverpb.RangeRequest.SortOrder sort_order = 5;
  void clear_sort_order();
  ::raftserverpb::RangeRequest_SortOrder sort_order() const;
  void set_sort_order(::raftserverpb::RangeRequest_SortOrder value);

  // .raftserverpb.RangeRequest.SortTarget sort_target = 6;
  void clear_sort_target();
  ::raftserverpb::RangeRequest_SortTarget sort_target() const;
  void set_sort_target(::raftserverpb::RangeRequest_SortTarget value);

  // int64 min_mod_revision = 10;
  void clear_min_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 min_mod_revision() const;
  void set_min_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 max_mod_revision = 11;
  void clear_max_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 max_mod_revision() const;
  void set_max_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 min_create_revision = 12;
  void clear_min_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 min_create_revision() const;
  void set_min_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 max_create_revision = 13;
  void clear_max_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 max_create_revision() const;
  void set_max_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool serializable = 7;
  void clear_serializable();
  bool serializable() const;
  void set_serializable(bool value);

  // bool keys_only = 8;
  void clear_keys_only();
  bool keys_only() const;
  void set_keys_only(bool value);

  // bool count_only = 9;
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);

  // @@protoc_insertion_point(class_scope:raftserverpb.RangeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  int sort_order_;
  int sort_target_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_create_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_create_revision_;
  bool serializable_;
  bool keys_only_;
  bool count_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RangeResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.RangeResponse) */ {
 public:
  RangeResponse();
  virtual ~RangeResponse();

  RangeResponse(const RangeResponse& from);
  RangeResponse(RangeResponse&& from) noexcept
    : RangeResponse() {
    *this = ::std::move(from);
  }

  inline RangeResponse& operator=(const RangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeResponse& operator=(RangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeResponse* internal_default_instance() {
    return reinterpret_cast<const RangeResponse*>(
               &_RangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RangeResponse& a, RangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeResponse* New() const final {
    return CreateMaybeMessage<RangeResponse>(nullptr);
  }

  RangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RangeResponse& from);
  void MergeFrom(const RangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.RangeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kCountFieldNumber = 4,
    kMoreFieldNumber = 3,
  };
  // repeated .raftserverpb.KeyValue kvs = 2;
  int kvs_size() const;
  void clear_kvs();
  ::raftserverpb::KeyValue* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >*
      mutable_kvs();
  const ::raftserverpb::KeyValue& kvs(int index) const;
  ::raftserverpb::KeyValue* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >&
      kvs() const;

  // .raftserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  const ::raftserverpb::ResponseHeader& header() const;
  ::raftserverpb::ResponseHeader* release_header();
  ::raftserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::raftserverpb::ResponseHeader* header);

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool more = 3;
  void clear_more();
  bool more() const;
  void set_more(bool value);

  // @@protoc_insertion_point(class_scope:raftserverpb.RangeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue > kvs_;
  ::raftserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  bool more_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PutRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.PutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kLeaseFieldNumber = 3,
    kPrevKvFieldNumber = 4,
    kIgnoreValueFieldNumber = 5,
    kIgnoreLeaseFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // int64 lease = 3;
  void clear_lease();
  ::PROTOBUF_NAMESPACE_ID::int64 lease() const;
  void set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool prev_kv = 4;
  void clear_prev_kv();
  bool prev_kv() const;
  void set_prev_kv(bool value);

  // bool ignore_value = 5;
  void clear_ignore_value();
  bool ignore_value() const;
  void set_ignore_value(bool value);

  // bool ignore_lease = 6;
  void clear_ignore_lease();
  bool ignore_lease() const;
  void set_ignore_lease(bool value);

  // @@protoc_insertion_point(class_scope:raftserverpb.PutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 lease_;
  bool prev_kv_;
  bool ignore_value_;
  bool ignore_lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PutResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(nullptr);
  }

  PutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.PutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPrevKvFieldNumber = 2,
  };
  // .raftserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  const ::raftserverpb::ResponseHeader& header() const;
  ::raftserverpb::ResponseHeader* release_header();
  ::raftserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::raftserverpb::ResponseHeader* header);

  // .raftserverpb.KeyValue prev_kv = 2;
  bool has_prev_kv() const;
  void clear_prev_kv();
  const ::raftserverpb::KeyValue& prev_kv() const;
  ::raftserverpb::KeyValue* release_prev_kv();
  ::raftserverpb::KeyValue* mutable_prev_kv();
  void set_allocated_prev_kv(::raftserverpb::KeyValue* prev_kv);

  // @@protoc_insertion_point(class_scope:raftserverpb.PutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::raftserverpb::ResponseHeader* header_;
  ::raftserverpb::KeyValue* prev_kv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRangeRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.DeleteRangeRequest) */ {
 public:
  DeleteRangeRequest();
  virtual ~DeleteRangeRequest();

  DeleteRangeRequest(const DeleteRangeRequest& from);
  DeleteRangeRequest(DeleteRangeRequest&& from) noexcept
    : DeleteRangeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRangeRequest& operator=(const DeleteRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRangeRequest& operator=(DeleteRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeRequest*>(
               &_DeleteRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRangeRequest& a, DeleteRangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRangeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeRequest* New() const final {
    return CreateMaybeMessage<DeleteRangeRequest>(nullptr);
  }

  DeleteRangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteRangeRequest& from);
  void MergeFrom(const DeleteRangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.DeleteRangeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kRangeEndFieldNumber = 2,
    kPrevKvFieldNumber = 3,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes range_end = 2;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);

  // bool prev_kv = 3;
  void clear_prev_kv();
  bool prev_kv() const;
  void set_prev_kv(bool value);

  // @@protoc_insertion_point(class_scope:raftserverpb.DeleteRangeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  bool prev_kv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRangeResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.DeleteRangeResponse) */ {
 public:
  DeleteRangeResponse();
  virtual ~DeleteRangeResponse();

  DeleteRangeResponse(const DeleteRangeResponse& from);
  DeleteRangeResponse(DeleteRangeResponse&& from) noexcept
    : DeleteRangeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRangeResponse& operator=(const DeleteRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRangeResponse& operator=(DeleteRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeResponse*>(
               &_DeleteRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteRangeResponse& a, DeleteRangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRangeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeResponse* New() const final {
    return CreateMaybeMessage<DeleteRangeResponse>(nullptr);
  }

  DeleteRangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteRangeResponse& from);
  void MergeFrom(const DeleteRangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.DeleteRangeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevKvsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kDeletedFieldNumber = 2,
  };
  // repeated .raftserverpb.KeyValue prev_kvs = 3;
  int prev_kvs_size() const;
  void clear_prev_kvs();
  ::raftserverpb::KeyValue* mutable_prev_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >*
      mutable_prev_kvs();
  const ::raftserverpb::KeyValue& prev_kvs(int index) const;
  ::raftserverpb::KeyValue* add_prev_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >&
      prev_kvs() const;

  // .raftserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  const ::raftserverpb::ResponseHeader& header() const;
  ::raftserverpb::ResponseHeader* release_header();
  ::raftserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::raftserverpb::ResponseHeader* header);

  // int64 deleted = 2;
  void clear_deleted();
  ::PROTOBUF_NAMESPACE_ID::int64 deleted() const;
  void set_deleted(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:raftserverpb.DeleteRangeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue > prev_kvs_;
  ::raftserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 deleted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RequestOp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.RequestOp) */ {
 public:
  RequestOp();
  virtual ~RequestOp();

  RequestOp(const RequestOp& from);
  RequestOp(RequestOp&& from) noexcept
    : RequestOp() {
    *this = ::std::move(from);
  }

  inline RequestOp& operator=(const RequestOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestOp& operator=(RequestOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RequestOp& default_instance();

  enum RequestCase {
    kRequestRange = 1,
    kRequestPut = 2,
    kRequestDeleteRange = 3,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestOp* internal_default_instance() {
    return reinterpret_cast<const RequestOp*>(
               &_RequestOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RequestOp& a, RequestOp& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestOp* New() const final {
    return CreateMaybeMessage<RequestOp>(nullptr);
  }

  RequestOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RequestOp& from);
  void MergeFrom(const RequestOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.RequestOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientidFieldNumber = 4,
    kSubsessionidFieldNumber = 5,
    kRequestRangeFieldNumber = 1,
    kRequestPutFieldNumber = 2,
    kRequestDeleteRangeFieldNumber = 3,
  };
  // uint32 clientid = 4;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 subsessionid = 5;
  void clear_subsessionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 subsessionid() const;
  void set_subsessionid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .raftserverpb.RangeRequest request_range = 1;
  bool has_request_range() const;
  void clear_request_range();
  const ::raftserverpb::RangeRequest& request_range() const;
  ::raftserverpb::RangeRequest* release_request_range();
  ::raftserverpb::RangeRequest* mutable_request_range();
  void set_allocated_request_range(::raftserverpb::RangeRequest* request_range);

  // .raftserverpb.PutRequest request_put = 2;
  bool has_request_put() const;
  void clear_request_put();
  const ::raftserverpb::PutRequest& request_put() const;
  ::raftserverpb::PutRequest* release_request_put();
  ::raftserverpb::PutRequest* mutable_request_put();
  void set_allocated_request_put(::raftserverpb::PutRequest* request_put);

  // .raftserverpb.DeleteRangeRequest request_delete_range = 3;
  bool has_request_delete_range() const;
  void clear_request_delete_range();
  const ::raftserverpb::DeleteRangeRequest& request_delete_range() const;
  ::raftserverpb::DeleteRangeRequest* release_request_delete_range();
  ::raftserverpb::DeleteRangeRequest* mutable_request_delete_range();
  void set_allocated_request_delete_range(::raftserverpb::DeleteRangeRequest* request_delete_range);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:raftserverpb.RequestOp)
 private:
  class _Internal;
  void set_has_request_range();
  void set_has_request_put();
  void set_has_request_delete_range();

  inline bool has_request() const;
  inline void clear_has_request();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subsessionid_;
  union RequestUnion {
    RequestUnion() {}
    ::raftserverpb::RangeRequest* request_range_;
    ::raftserverpb::PutRequest* request_put_;
    ::raftserverpb::DeleteRangeRequest* request_delete_range_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseOp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:raftserverpb.ResponseOp) */ {
 public:
  ResponseOp();
  virtual ~ResponseOp();

  ResponseOp(const ResponseOp& from);
  ResponseOp(ResponseOp&& from) noexcept
    : ResponseOp() {
    *this = ::std::move(from);
  }

  inline ResponseOp& operator=(const ResponseOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOp& operator=(ResponseOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResponseOp& default_instance();

  enum ResponseCase {
    kResponseRange = 1,
    kResponsePut = 2,
    kResponseDeleteRange = 3,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseOp* internal_default_instance() {
    return reinterpret_cast<const ResponseOp*>(
               &_ResponseOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResponseOp& a, ResponseOp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseOp* New() const final {
    return CreateMaybeMessage<ResponseOp>(nullptr);
  }

  ResponseOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseOp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResponseOp& from);
  void MergeFrom(const ResponseOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftserverpb.ResponseOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrornoFieldNumber = 4,
    kSubsessionidFieldNumber = 5,
    kResponseRangeFieldNumber = 1,
    kResponsePutFieldNumber = 2,
    kResponseDeleteRangeFieldNumber = 3,
  };
  // uint32 errorno = 4;
  void clear_errorno();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorno() const;
  void set_errorno(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 subsessionid = 5;
  void clear_subsessionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 subsessionid() const;
  void set_subsessionid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .raftserverpb.RangeResponse response_range = 1;
  bool has_response_range() const;
  void clear_response_range();
  const ::raftserverpb::RangeResponse& response_range() const;
  ::raftserverpb::RangeResponse* release_response_range();
  ::raftserverpb::RangeResponse* mutable_response_range();
  void set_allocated_response_range(::raftserverpb::RangeResponse* response_range);

  // .raftserverpb.PutResponse response_put = 2;
  bool has_response_put() const;
  void clear_response_put();
  const ::raftserverpb::PutResponse& response_put() const;
  ::raftserverpb::PutResponse* release_response_put();
  ::raftserverpb::PutResponse* mutable_response_put();
  void set_allocated_response_put(::raftserverpb::PutResponse* response_put);

  // .raftserverpb.DeleteRangeResponse response_delete_range = 3;
  bool has_response_delete_range() const;
  void clear_response_delete_range();
  const ::raftserverpb::DeleteRangeResponse& response_delete_range() const;
  ::raftserverpb::DeleteRangeResponse* release_response_delete_range();
  ::raftserverpb::DeleteRangeResponse* mutable_response_delete_range();
  void set_allocated_response_delete_range(::raftserverpb::DeleteRangeResponse* response_delete_range);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:raftserverpb.ResponseOp)
 private:
  class _Internal;
  void set_has_response_range();
  void set_has_response_put();
  void set_has_response_delete_range();

  inline bool has_response() const;
  inline void clear_has_response();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subsessionid_;
  union ResponseUnion {
    ResponseUnion() {}
    ::raftserverpb::RangeResponse* response_range_;
    ::raftserverpb::PutResponse* response_put_;
    ::raftserverpb::DeleteRangeResponse* response_delete_range_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:raftserverpb.KeyValue.key)
  return key_.GetNoArena();
}
inline void KeyValue::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.KeyValue.key)
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.KeyValue.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:raftserverpb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.KeyValue.key)
}

// int64 create_revision = 2;
inline void KeyValue::clear_create_revision() {
  create_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::create_revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.KeyValue.create_revision)
  return create_revision_;
}
inline void KeyValue::set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.KeyValue.create_revision)
}

// int64 mod_revision = 3;
inline void KeyValue::clear_mod_revision() {
  mod_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::mod_revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.KeyValue.mod_revision)
  return mod_revision_;
}
inline void KeyValue::set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mod_revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.KeyValue.mod_revision)
}

// int64 version = 4;
inline void KeyValue::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::version() const {
  // @@protoc_insertion_point(field_get:raftserverpb.KeyValue.version)
  return version_;
}
inline void KeyValue::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.KeyValue.version)
}

// bytes value = 5;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:raftserverpb.KeyValue.value)
  return value_.GetNoArena();
}
inline void KeyValue::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.KeyValue.value)
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.KeyValue.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:raftserverpb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.KeyValue.value)
}

// int64 lease = 6;
inline void KeyValue::clear_lease() {
  lease_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::lease() const {
  // @@protoc_insertion_point(field_get:raftserverpb.KeyValue.lease)
  return lease_;
}
inline void KeyValue::set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lease_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.KeyValue.lease)
}

// -------------------------------------------------------------------

// ResponseHeader

// uint64 cluster_id = 1;
inline void ResponseHeader::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
inline void ResponseHeader::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.ResponseHeader.cluster_id)
}

// uint64 member_id = 2;
inline void ResponseHeader::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::member_id() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseHeader.member_id)
  return member_id_;
}
inline void ResponseHeader::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.ResponseHeader.member_id)
}

// int64 revision = 3;
inline void ResponseHeader::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseHeader::revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseHeader.revision)
  return revision_;
}
inline void ResponseHeader::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.ResponseHeader.revision)
}

// uint64 raft_term = 4;
inline void ResponseHeader::clear_raft_term() {
  raft_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::raft_term() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseHeader.raft_term)
  return raft_term_;
}
inline void ResponseHeader::set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  raft_term_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.ResponseHeader.raft_term)
}

// -------------------------------------------------------------------

// RangeRequest

// bytes key = 1;
inline void RangeRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeRequest::key() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.key)
  return key_.GetNoArena();
}
inline void RangeRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.key)
}
inline void RangeRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.RangeRequest.key)
}
inline void RangeRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.RangeRequest.key)
}
inline void RangeRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.RangeRequest.key)
}
inline std::string* RangeRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.RangeRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:raftserverpb.RangeRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.RangeRequest.key)
}

// bytes range_end = 2;
inline void RangeRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeRequest::range_end() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.range_end)
  return range_end_.GetNoArena();
}
inline void RangeRequest::set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.range_end)
}
inline void RangeRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.RangeRequest.range_end)
}
inline void RangeRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.RangeRequest.range_end)
}
inline void RangeRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.RangeRequest.range_end)
}
inline std::string* RangeRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.RangeRequest.range_end)
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:raftserverpb.RangeRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.RangeRequest.range_end)
}

// int64 limit = 3;
inline void RangeRequest::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::limit() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.limit)
  return limit_;
}
inline void RangeRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.limit)
}

// int64 revision = 4;
inline void RangeRequest::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.revision)
  return revision_;
}
inline void RangeRequest::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.revision)
}

// .raftserverpb.RangeRequest.SortOrder sort_order = 5;
inline void RangeRequest::clear_sort_order() {
  sort_order_ = 0;
}
inline ::raftserverpb::RangeRequest_SortOrder RangeRequest::sort_order() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.sort_order)
  return static_cast< ::raftserverpb::RangeRequest_SortOrder >(sort_order_);
}
inline void RangeRequest::set_sort_order(::raftserverpb::RangeRequest_SortOrder value) {
  
  sort_order_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.sort_order)
}

// .raftserverpb.RangeRequest.SortTarget sort_target = 6;
inline void RangeRequest::clear_sort_target() {
  sort_target_ = 0;
}
inline ::raftserverpb::RangeRequest_SortTarget RangeRequest::sort_target() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.sort_target)
  return static_cast< ::raftserverpb::RangeRequest_SortTarget >(sort_target_);
}
inline void RangeRequest::set_sort_target(::raftserverpb::RangeRequest_SortTarget value) {
  
  sort_target_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.sort_target)
}

// bool serializable = 7;
inline void RangeRequest::clear_serializable() {
  serializable_ = false;
}
inline bool RangeRequest::serializable() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.serializable)
  return serializable_;
}
inline void RangeRequest::set_serializable(bool value) {
  
  serializable_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.serializable)
}

// bool keys_only = 8;
inline void RangeRequest::clear_keys_only() {
  keys_only_ = false;
}
inline bool RangeRequest::keys_only() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.keys_only)
  return keys_only_;
}
inline void RangeRequest::set_keys_only(bool value) {
  
  keys_only_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.keys_only)
}

// bool count_only = 9;
inline void RangeRequest::clear_count_only() {
  count_only_ = false;
}
inline bool RangeRequest::count_only() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.count_only)
  return count_only_;
}
inline void RangeRequest::set_count_only(bool value) {
  
  count_only_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.count_only)
}

// int64 min_mod_revision = 10;
inline void RangeRequest::clear_min_mod_revision() {
  min_mod_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::min_mod_revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.min_mod_revision)
  return min_mod_revision_;
}
inline void RangeRequest::set_min_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_mod_revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.min_mod_revision)
}

// int64 max_mod_revision = 11;
inline void RangeRequest::clear_max_mod_revision() {
  max_mod_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::max_mod_revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.max_mod_revision)
  return max_mod_revision_;
}
inline void RangeRequest::set_max_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_mod_revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.max_mod_revision)
}

// int64 min_create_revision = 12;
inline void RangeRequest::clear_min_create_revision() {
  min_create_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::min_create_revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.min_create_revision)
  return min_create_revision_;
}
inline void RangeRequest::set_min_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_create_revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.min_create_revision)
}

// int64 max_create_revision = 13;
inline void RangeRequest::clear_max_create_revision() {
  max_create_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::max_create_revision() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeRequest.max_create_revision)
  return max_create_revision_;
}
inline void RangeRequest::set_max_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_create_revision_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeRequest.max_create_revision)
}

// -------------------------------------------------------------------

// RangeResponse

// .raftserverpb.ResponseHeader header = 1;
inline bool RangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void RangeResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::raftserverpb::ResponseHeader& RangeResponse::header() const {
  const ::raftserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:raftserverpb.RangeResponse.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftserverpb::ResponseHeader*>(
      &::raftserverpb::_ResponseHeader_default_instance_);
}
inline ::raftserverpb::ResponseHeader* RangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:raftserverpb.RangeResponse.header)
  
  ::raftserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::raftserverpb::ResponseHeader* RangeResponse::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.RangeResponse.header)
  return header_;
}
inline void RangeResponse::set_allocated_header(::raftserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.RangeResponse.header)
}

// repeated .raftserverpb.KeyValue kvs = 2;
inline int RangeResponse::kvs_size() const {
  return kvs_.size();
}
inline void RangeResponse::clear_kvs() {
  kvs_.Clear();
}
inline ::raftserverpb::KeyValue* RangeResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:raftserverpb.RangeResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >*
RangeResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:raftserverpb.RangeResponse.kvs)
  return &kvs_;
}
inline const ::raftserverpb::KeyValue& RangeResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeResponse.kvs)
  return kvs_.Get(index);
}
inline ::raftserverpb::KeyValue* RangeResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:raftserverpb.RangeResponse.kvs)
  return kvs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >&
RangeResponse::kvs() const {
  // @@protoc_insertion_point(field_list:raftserverpb.RangeResponse.kvs)
  return kvs_;
}

// bool more = 3;
inline void RangeResponse::clear_more() {
  more_ = false;
}
inline bool RangeResponse::more() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeResponse.more)
  return more_;
}
inline void RangeResponse::set_more(bool value) {
  
  more_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeResponse.more)
}

// int64 count = 4;
inline void RangeResponse::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeResponse::count() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RangeResponse.count)
  return count_;
}
inline void RangeResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RangeResponse.count)
}

// -------------------------------------------------------------------

// PutRequest

// bytes key = 1;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raftserverpb.PutRequest.key)
  return key_.GetNoArena();
}
inline void PutRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.PutRequest.key)
}
inline void PutRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.PutRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raftserverpb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.PutRequest.key)
}

// bytes value = 2;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raftserverpb.PutRequest.value)
  return value_.GetNoArena();
}
inline void PutRequest::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.PutRequest.value)
}
inline void PutRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.PutRequest.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raftserverpb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.PutRequest.value)
}

// int64 lease = 3;
inline void PutRequest::clear_lease() {
  lease_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutRequest::lease() const {
  // @@protoc_insertion_point(field_get:raftserverpb.PutRequest.lease)
  return lease_;
}
inline void PutRequest::set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lease_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.PutRequest.lease)
}

// bool prev_kv = 4;
inline void PutRequest::clear_prev_kv() {
  prev_kv_ = false;
}
inline bool PutRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:raftserverpb.PutRequest.prev_kv)
  return prev_kv_;
}
inline void PutRequest::set_prev_kv(bool value) {
  
  prev_kv_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.PutRequest.prev_kv)
}

// bool ignore_value = 5;
inline void PutRequest::clear_ignore_value() {
  ignore_value_ = false;
}
inline bool PutRequest::ignore_value() const {
  // @@protoc_insertion_point(field_get:raftserverpb.PutRequest.ignore_value)
  return ignore_value_;
}
inline void PutRequest::set_ignore_value(bool value) {
  
  ignore_value_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.PutRequest.ignore_value)
}

// bool ignore_lease = 6;
inline void PutRequest::clear_ignore_lease() {
  ignore_lease_ = false;
}
inline bool PutRequest::ignore_lease() const {
  // @@protoc_insertion_point(field_get:raftserverpb.PutRequest.ignore_lease)
  return ignore_lease_;
}
inline void PutRequest::set_ignore_lease(bool value) {
  
  ignore_lease_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.PutRequest.ignore_lease)
}

// -------------------------------------------------------------------

// PutResponse

// .raftserverpb.ResponseHeader header = 1;
inline bool PutResponse::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void PutResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::raftserverpb::ResponseHeader& PutResponse::header() const {
  const ::raftserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:raftserverpb.PutResponse.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftserverpb::ResponseHeader*>(
      &::raftserverpb::_ResponseHeader_default_instance_);
}
inline ::raftserverpb::ResponseHeader* PutResponse::release_header() {
  // @@protoc_insertion_point(field_release:raftserverpb.PutResponse.header)
  
  ::raftserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::raftserverpb::ResponseHeader* PutResponse::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.PutResponse.header)
  return header_;
}
inline void PutResponse::set_allocated_header(::raftserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.PutResponse.header)
}

// .raftserverpb.KeyValue prev_kv = 2;
inline bool PutResponse::has_prev_kv() const {
  return this != internal_default_instance() && prev_kv_ != nullptr;
}
inline void PutResponse::clear_prev_kv() {
  if (GetArenaNoVirtual() == nullptr && prev_kv_ != nullptr) {
    delete prev_kv_;
  }
  prev_kv_ = nullptr;
}
inline const ::raftserverpb::KeyValue& PutResponse::prev_kv() const {
  const ::raftserverpb::KeyValue* p = prev_kv_;
  // @@protoc_insertion_point(field_get:raftserverpb.PutResponse.prev_kv)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftserverpb::KeyValue*>(
      &::raftserverpb::_KeyValue_default_instance_);
}
inline ::raftserverpb::KeyValue* PutResponse::release_prev_kv() {
  // @@protoc_insertion_point(field_release:raftserverpb.PutResponse.prev_kv)
  
  ::raftserverpb::KeyValue* temp = prev_kv_;
  prev_kv_ = nullptr;
  return temp;
}
inline ::raftserverpb::KeyValue* PutResponse::mutable_prev_kv() {
  
  if (prev_kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftserverpb::KeyValue>(GetArenaNoVirtual());
    prev_kv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.PutResponse.prev_kv)
  return prev_kv_;
}
inline void PutResponse::set_allocated_prev_kv(::raftserverpb::KeyValue* prev_kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prev_kv_;
  }
  if (prev_kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prev_kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_kv, submessage_arena);
    }
    
  } else {
    
  }
  prev_kv_ = prev_kv;
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.PutResponse.prev_kv)
}

// -------------------------------------------------------------------

// DeleteRangeRequest

// bytes key = 1;
inline void DeleteRangeRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRangeRequest::key() const {
  // @@protoc_insertion_point(field_get:raftserverpb.DeleteRangeRequest.key)
  return key_.GetNoArena();
}
inline void DeleteRangeRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.DeleteRangeRequest.key)
}
inline void DeleteRangeRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.DeleteRangeRequest.key)
}
inline void DeleteRangeRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.DeleteRangeRequest.key)
}
inline void DeleteRangeRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.DeleteRangeRequest.key)
}
inline std::string* DeleteRangeRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.DeleteRangeRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:raftserverpb.DeleteRangeRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.DeleteRangeRequest.key)
}

// bytes range_end = 2;
inline void DeleteRangeRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRangeRequest::range_end() const {
  // @@protoc_insertion_point(field_get:raftserverpb.DeleteRangeRequest.range_end)
  return range_end_.GetNoArena();
}
inline void DeleteRangeRequest::set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftserverpb.DeleteRangeRequest.range_end)
}
inline void DeleteRangeRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftserverpb.DeleteRangeRequest.range_end)
}
inline void DeleteRangeRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftserverpb.DeleteRangeRequest.range_end)
}
inline void DeleteRangeRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftserverpb.DeleteRangeRequest.range_end)
}
inline std::string* DeleteRangeRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:raftserverpb.DeleteRangeRequest.range_end)
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRangeRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:raftserverpb.DeleteRangeRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.DeleteRangeRequest.range_end)
}

// bool prev_kv = 3;
inline void DeleteRangeRequest::clear_prev_kv() {
  prev_kv_ = false;
}
inline bool DeleteRangeRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:raftserverpb.DeleteRangeRequest.prev_kv)
  return prev_kv_;
}
inline void DeleteRangeRequest::set_prev_kv(bool value) {
  
  prev_kv_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.DeleteRangeRequest.prev_kv)
}

// -------------------------------------------------------------------

// DeleteRangeResponse

// .raftserverpb.ResponseHeader header = 1;
inline bool DeleteRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void DeleteRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::raftserverpb::ResponseHeader& DeleteRangeResponse::header() const {
  const ::raftserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:raftserverpb.DeleteRangeResponse.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftserverpb::ResponseHeader*>(
      &::raftserverpb::_ResponseHeader_default_instance_);
}
inline ::raftserverpb::ResponseHeader* DeleteRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:raftserverpb.DeleteRangeResponse.header)
  
  ::raftserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::raftserverpb::ResponseHeader* DeleteRangeResponse::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.DeleteRangeResponse.header)
  return header_;
}
inline void DeleteRangeResponse::set_allocated_header(::raftserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raftserverpb.DeleteRangeResponse.header)
}

// int64 deleted = 2;
inline void DeleteRangeResponse::clear_deleted() {
  deleted_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRangeResponse::deleted() const {
  // @@protoc_insertion_point(field_get:raftserverpb.DeleteRangeResponse.deleted)
  return deleted_;
}
inline void DeleteRangeResponse::set_deleted(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.DeleteRangeResponse.deleted)
}

// repeated .raftserverpb.KeyValue prev_kvs = 3;
inline int DeleteRangeResponse::prev_kvs_size() const {
  return prev_kvs_.size();
}
inline void DeleteRangeResponse::clear_prev_kvs() {
  prev_kvs_.Clear();
}
inline ::raftserverpb::KeyValue* DeleteRangeResponse::mutable_prev_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:raftserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >*
DeleteRangeResponse::mutable_prev_kvs() {
  // @@protoc_insertion_point(field_mutable_list:raftserverpb.DeleteRangeResponse.prev_kvs)
  return &prev_kvs_;
}
inline const ::raftserverpb::KeyValue& DeleteRangeResponse::prev_kvs(int index) const {
  // @@protoc_insertion_point(field_get:raftserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Get(index);
}
inline ::raftserverpb::KeyValue* DeleteRangeResponse::add_prev_kvs() {
  // @@protoc_insertion_point(field_add:raftserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftserverpb::KeyValue >&
DeleteRangeResponse::prev_kvs() const {
  // @@protoc_insertion_point(field_list:raftserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_;
}

// -------------------------------------------------------------------

// RequestOp

// .raftserverpb.RangeRequest request_range = 1;
inline bool RequestOp::has_request_range() const {
  return request_case() == kRequestRange;
}
inline void RequestOp::set_has_request_range() {
  _oneof_case_[0] = kRequestRange;
}
inline void RequestOp::clear_request_range() {
  if (has_request_range()) {
    delete request_.request_range_;
    clear_has_request();
  }
}
inline ::raftserverpb::RangeRequest* RequestOp::release_request_range() {
  // @@protoc_insertion_point(field_release:raftserverpb.RequestOp.request_range)
  if (has_request_range()) {
    clear_has_request();
      ::raftserverpb::RangeRequest* temp = request_.request_range_;
    request_.request_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raftserverpb::RangeRequest& RequestOp::request_range() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RequestOp.request_range)
  return has_request_range()
      ? *request_.request_range_
      : *reinterpret_cast< ::raftserverpb::RangeRequest*>(&::raftserverpb::_RangeRequest_default_instance_);
}
inline ::raftserverpb::RangeRequest* RequestOp::mutable_request_range() {
  if (!has_request_range()) {
    clear_request();
    set_has_request_range();
    request_.request_range_ = CreateMaybeMessage< ::raftserverpb::RangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.RequestOp.request_range)
  return request_.request_range_;
}

// .raftserverpb.PutRequest request_put = 2;
inline bool RequestOp::has_request_put() const {
  return request_case() == kRequestPut;
}
inline void RequestOp::set_has_request_put() {
  _oneof_case_[0] = kRequestPut;
}
inline void RequestOp::clear_request_put() {
  if (has_request_put()) {
    delete request_.request_put_;
    clear_has_request();
  }
}
inline ::raftserverpb::PutRequest* RequestOp::release_request_put() {
  // @@protoc_insertion_point(field_release:raftserverpb.RequestOp.request_put)
  if (has_request_put()) {
    clear_has_request();
      ::raftserverpb::PutRequest* temp = request_.request_put_;
    request_.request_put_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raftserverpb::PutRequest& RequestOp::request_put() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RequestOp.request_put)
  return has_request_put()
      ? *request_.request_put_
      : *reinterpret_cast< ::raftserverpb::PutRequest*>(&::raftserverpb::_PutRequest_default_instance_);
}
inline ::raftserverpb::PutRequest* RequestOp::mutable_request_put() {
  if (!has_request_put()) {
    clear_request();
    set_has_request_put();
    request_.request_put_ = CreateMaybeMessage< ::raftserverpb::PutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.RequestOp.request_put)
  return request_.request_put_;
}

// .raftserverpb.DeleteRangeRequest request_delete_range = 3;
inline bool RequestOp::has_request_delete_range() const {
  return request_case() == kRequestDeleteRange;
}
inline void RequestOp::set_has_request_delete_range() {
  _oneof_case_[0] = kRequestDeleteRange;
}
inline void RequestOp::clear_request_delete_range() {
  if (has_request_delete_range()) {
    delete request_.request_delete_range_;
    clear_has_request();
  }
}
inline ::raftserverpb::DeleteRangeRequest* RequestOp::release_request_delete_range() {
  // @@protoc_insertion_point(field_release:raftserverpb.RequestOp.request_delete_range)
  if (has_request_delete_range()) {
    clear_has_request();
      ::raftserverpb::DeleteRangeRequest* temp = request_.request_delete_range_;
    request_.request_delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raftserverpb::DeleteRangeRequest& RequestOp::request_delete_range() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RequestOp.request_delete_range)
  return has_request_delete_range()
      ? *request_.request_delete_range_
      : *reinterpret_cast< ::raftserverpb::DeleteRangeRequest*>(&::raftserverpb::_DeleteRangeRequest_default_instance_);
}
inline ::raftserverpb::DeleteRangeRequest* RequestOp::mutable_request_delete_range() {
  if (!has_request_delete_range()) {
    clear_request();
    set_has_request_delete_range();
    request_.request_delete_range_ = CreateMaybeMessage< ::raftserverpb::DeleteRangeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.RequestOp.request_delete_range)
  return request_.request_delete_range_;
}

// uint32 clientid = 4;
inline void RequestOp::clear_clientid() {
  clientid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestOp::clientid() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RequestOp.clientid)
  return clientid_;
}
inline void RequestOp::set_clientid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RequestOp.clientid)
}

// uint32 subsessionid = 5;
inline void RequestOp::clear_subsessionid() {
  subsessionid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestOp::subsessionid() const {
  // @@protoc_insertion_point(field_get:raftserverpb.RequestOp.subsessionid)
  return subsessionid_;
}
inline void RequestOp::set_subsessionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subsessionid_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.RequestOp.subsessionid)
}

inline bool RequestOp::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void RequestOp::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline RequestOp::RequestCase RequestOp::request_case() const {
  return RequestOp::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseOp

// .raftserverpb.RangeResponse response_range = 1;
inline bool ResponseOp::has_response_range() const {
  return response_case() == kResponseRange;
}
inline void ResponseOp::set_has_response_range() {
  _oneof_case_[0] = kResponseRange;
}
inline void ResponseOp::clear_response_range() {
  if (has_response_range()) {
    delete response_.response_range_;
    clear_has_response();
  }
}
inline ::raftserverpb::RangeResponse* ResponseOp::release_response_range() {
  // @@protoc_insertion_point(field_release:raftserverpb.ResponseOp.response_range)
  if (has_response_range()) {
    clear_has_response();
      ::raftserverpb::RangeResponse* temp = response_.response_range_;
    response_.response_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raftserverpb::RangeResponse& ResponseOp::response_range() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseOp.response_range)
  return has_response_range()
      ? *response_.response_range_
      : *reinterpret_cast< ::raftserverpb::RangeResponse*>(&::raftserverpb::_RangeResponse_default_instance_);
}
inline ::raftserverpb::RangeResponse* ResponseOp::mutable_response_range() {
  if (!has_response_range()) {
    clear_response();
    set_has_response_range();
    response_.response_range_ = CreateMaybeMessage< ::raftserverpb::RangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.ResponseOp.response_range)
  return response_.response_range_;
}

// .raftserverpb.PutResponse response_put = 2;
inline bool ResponseOp::has_response_put() const {
  return response_case() == kResponsePut;
}
inline void ResponseOp::set_has_response_put() {
  _oneof_case_[0] = kResponsePut;
}
inline void ResponseOp::clear_response_put() {
  if (has_response_put()) {
    delete response_.response_put_;
    clear_has_response();
  }
}
inline ::raftserverpb::PutResponse* ResponseOp::release_response_put() {
  // @@protoc_insertion_point(field_release:raftserverpb.ResponseOp.response_put)
  if (has_response_put()) {
    clear_has_response();
      ::raftserverpb::PutResponse* temp = response_.response_put_;
    response_.response_put_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raftserverpb::PutResponse& ResponseOp::response_put() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseOp.response_put)
  return has_response_put()
      ? *response_.response_put_
      : *reinterpret_cast< ::raftserverpb::PutResponse*>(&::raftserverpb::_PutResponse_default_instance_);
}
inline ::raftserverpb::PutResponse* ResponseOp::mutable_response_put() {
  if (!has_response_put()) {
    clear_response();
    set_has_response_put();
    response_.response_put_ = CreateMaybeMessage< ::raftserverpb::PutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.ResponseOp.response_put)
  return response_.response_put_;
}

// .raftserverpb.DeleteRangeResponse response_delete_range = 3;
inline bool ResponseOp::has_response_delete_range() const {
  return response_case() == kResponseDeleteRange;
}
inline void ResponseOp::set_has_response_delete_range() {
  _oneof_case_[0] = kResponseDeleteRange;
}
inline void ResponseOp::clear_response_delete_range() {
  if (has_response_delete_range()) {
    delete response_.response_delete_range_;
    clear_has_response();
  }
}
inline ::raftserverpb::DeleteRangeResponse* ResponseOp::release_response_delete_range() {
  // @@protoc_insertion_point(field_release:raftserverpb.ResponseOp.response_delete_range)
  if (has_response_delete_range()) {
    clear_has_response();
      ::raftserverpb::DeleteRangeResponse* temp = response_.response_delete_range_;
    response_.response_delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raftserverpb::DeleteRangeResponse& ResponseOp::response_delete_range() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseOp.response_delete_range)
  return has_response_delete_range()
      ? *response_.response_delete_range_
      : *reinterpret_cast< ::raftserverpb::DeleteRangeResponse*>(&::raftserverpb::_DeleteRangeResponse_default_instance_);
}
inline ::raftserverpb::DeleteRangeResponse* ResponseOp::mutable_response_delete_range() {
  if (!has_response_delete_range()) {
    clear_response();
    set_has_response_delete_range();
    response_.response_delete_range_ = CreateMaybeMessage< ::raftserverpb::DeleteRangeResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:raftserverpb.ResponseOp.response_delete_range)
  return response_.response_delete_range_;
}

// uint32 errorno = 4;
inline void ResponseOp::clear_errorno() {
  errorno_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseOp::errorno() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseOp.errorno)
  return errorno_;
}
inline void ResponseOp::set_errorno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errorno_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.ResponseOp.errorno)
}

// uint32 subsessionid = 5;
inline void ResponseOp::clear_subsessionid() {
  subsessionid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseOp::subsessionid() const {
  // @@protoc_insertion_point(field_get:raftserverpb.ResponseOp.subsessionid)
  return subsessionid_;
}
inline void ResponseOp::set_subsessionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subsessionid_ = value;
  // @@protoc_insertion_point(field_set:raftserverpb.ResponseOp.subsessionid)
}

inline bool ResponseOp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ResponseOp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ResponseOp::ResponseCase ResponseOp::response_case() const {
  return ResponseOp::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftserverpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raftserverpb::RangeRequest_SortOrder> : ::std::true_type {};
template <> struct is_proto_enum< ::raftserverpb::RangeRequest_SortTarget> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
